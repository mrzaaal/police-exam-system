/**
 * worker/worker.js
 * Proses worker Node.js untuk menangani tugas di latar belakang.
 */
const { Worker } = require('bullmq');
const mysql = require('mysql2/promise');
const { createObjectCsvWriter } = require('csv-writer');
const path = require('path');

// --- Konfigurasi ---
const redisConnection = {
  host: '127.0.0.1',
  port: 6379,
};

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'police_exam_db',
};

const EXPORT_QUEUE_NAME = 'export-queue';

// --- Fungsi Prosesor Job ---
const processExportJob = async (job) => {
  console.log(`[${new Date().toISOString()}] Memulai proses ekspor untuk admin: ${job.data.adminUsername}`);

  let dbConnection;
  try {
    // 1. Hubungkan ke database
    dbConnection = await mysql.createConnection(dbConfig);
    console.log('Terhubung ke database...');

    // 2. Ambil semua data hasil ujian
    const [results] = await dbConnection.execute("SELECT username, name, score, status, grading_status, completed_at FROM results ORDER BY completed_at DESC");
    console.log(`Menemukan ${results.length} data hasil untuk diekspor.`);

    if (results.length === 0) {
      console.log('Tidak ada data untuk diekspor. Pekerjaan selesai.');
      return { status: 'completed', message: 'No data to export.' };
    }

    // 3. Siapkan file CSV
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `hasil_ujian_${timestamp}.csv`;
    // Simpan di folder 'public/exports' di root proyek agar bisa diakses
    const exportPath = path.join(__dirname, '..', 'public', 'exports', filename); 
    
    const csvWriter = createObjectCsvWriter({
      path: exportPath,
      header: [
        { id: 'username', title: 'Username' },
        { id: 'name', title: 'Nama Lengkap' },
        { id: 'score', title: 'Skor Akhir' },
        { id: 'status', title: 'Status Kelulusan' },
        { id: 'grading_status', title: 'Status Penilaian' },
        { id: 'completed_at', title: 'Waktu Selesai' },
      ],
    });

    // 4. Tulis data ke file CSV
    await csvWriter.writeRecords(results);
    console.log(`Ekspor berhasil. File disimpan di: ${exportPath}`);

    // (Langkah selanjutnya) Di sini Anda bisa menambahkan logika untuk
    // menyimpan path file ke database atau mengirim notifikasi ke admin.
    
    return { status: 'completed', filePath: exportPath };

  } catch (error) {
    console.error('Terjadi error saat memproses ekspor:', error);
    throw error; // Lempar error agar BullMQ menandai job sebagai gagal
  } finally {
    if (dbConnection) {
      await dbConnection.end();
      console.log('Koneksi database ditutup.');
    }
  }
};

// --- Inisialisasi Worker ---
const worker = new Worker(EXPORT_QUEUE_NAME, processExportJob, {
  connection: redisConnection,
  concurrency: 5, // Proses hingga 5 job secara bersamaan
});

console.log(`Worker untuk antrian "${EXPORT_QUEUE_NAME}" sedang berjalan...`);

worker.on('completed', (job, result) => {
  console.log(`Pekerjaan ${job.id} selesai dengan hasil:`, result.status);
});

worker.on('failed', (job, err) => {
  console.error(`Pekerjaan ${job.id} gagal dengan error:`, err.message);
});
